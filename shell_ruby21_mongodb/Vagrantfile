# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "hashicorp/precise32"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 3000, host: 8888

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../data", "/farm"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  #This next bit fixes the 'stdin is not a tty' error when shell provisioning Ubuntu boxes
  # config.vm.provision :shell,
  #if there a line that only consists of 'mesg n' in /root/.profile, replace it with 'tty -s && mesg n'
  # :inline => "(grep -q -E '^mesg n$' /root/.profile && sed -i 's/^mesg n$/tty -s \\&\\& mesg n/g' /root/.profile && echo 'Ignore the previous error about stdin not being a tty. Fixing it now...') || exit 0;"
  
  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get -y -q update


    # install mongodb
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
    sudo apt-get -y -q update
    sudo apt-get install -y -q mongodb-org
    sudo service mongod start
    
    # make, gcc, etc build tools
    sudo apt-get install -y -q build-essential curl git-core

    # ruby favorable apt-get packages
    # build-essential openssl
    # libreadline6 libreadline6-dev
    # curl git-core
    # zlib1g zlib1g-dev
    # libssl-dev libyaml-dev
    # libsqlite3-dev sqlite3
    # libxml2-dev libxslt-dev
    # autoconf libc6-dev
    # ncurses-dev automake
    # libtool bison
    # subversion libmysqlclient-dev
    # libpq-dev wget
    # nodejs

    # from http://stackoverflow.com/questions/18490591/how-to-install-ruby-2-on-ubuntu-without-rvm
    sudo apt-get install -y -q python-software-properties
    
    # Adds Ruby 2.1 to Ubuntu 14.04
    sudo apt-add-repository -y ppa:brightbox/ruby-ng
    
    # Adds Ruby 1.9, 2.0 or 2.1 to Ubuntu 14.04
    # sudo add-apt-repository ppa:brightbox/ruby-ng-experimental

    sudo apt-get -y -q update

    # now I can install ruby
    sudo apt-get install -y -q ruby2.1 ruby2.1-dev

    # http://stackoverflow.com/a/1892889/2126990
    # priority ruby: https://gist.github.com/brodock/7693207
    sudo update-alternatives --remove ruby /usr/bin/ruby2.1
    sudo update-alternatives --remove irb /usr/bin/irb2.1
    sudo update-alternatives --remove gem /usr/bin/gem2.1

    sudo update-alternatives \
    --install /usr/bin/ruby ruby /usr/bin/ruby2.1 50 \
    --slave /usr/bin/irb irb /usr/bin/irb2.1 \
    --slave /usr/bin/rake rake /usr/bin/rake2.1 \
    --slave /usr/bin/gem gem /usr/bin/gem2.1 \
    --slave /usr/bin/rdoc rdoc /usr/bin/rdoc2.1 \
    --slave /usr/bin/testrb testrb /usr/bin/testrb2.1 \
    --slave /usr/bin/erb erb /usr/bin/erb2.1 \
    --slave /usr/bin/ri ri /usr/bin/ri2.1

    update-alternatives --config ruby
    update-alternatives --display ruby

    sudo gem install --no-ri --no-rdoc bundler
  SHELL
end
